/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
  readonly url: Maybe<Scalars['String']>;
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type MarkdownExcerptFormats =
  | 'HTML'
  | 'MARKDOWN'
  | 'PLAIN';

type MarkdownHeading = {
  readonly depth: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type MarkdownHeadingFieldSelector = {
  readonly depth: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type MarkdownHeadingFilterInput = {
  readonly depth: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownHeadingFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownHeadingFilterInput>;
};

type MarkdownHeadingLevels =
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6';

type MarkdownHeadingSortInput = {
  readonly depth: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type MarkdownRemark = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly excerptAst: Maybe<Scalars['JSON']>;
  readonly frontmatter: Maybe<MarkdownRemarkFrontmatter>;
  readonly headings: Maybe<ReadonlyArray<Maybe<MarkdownHeading>>>;
  readonly html: Maybe<Scalars['String']>;
  readonly htmlAst: Maybe<Scalars['JSON']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly rawMarkdownBody: Maybe<Scalars['String']>;
  readonly tableOfContents: Maybe<Scalars['String']>;
  readonly timeToRead: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<MarkdownWordCount>;
};


type MarkdownRemark_excerptArgs = {
  format?: InputMaybe<MarkdownExcerptFormats>;
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_excerptAstArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_headingsArgs = {
  depth: InputMaybe<MarkdownHeadingLevels>;
};


type MarkdownRemark_tableOfContentsArgs = {
  absolute?: InputMaybe<Scalars['Boolean']>;
  heading: InputMaybe<Scalars['String']>;
  maxDepth: InputMaybe<Scalars['Int']>;
  pathToSlugField?: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkEdge = {
  readonly next: Maybe<MarkdownRemark>;
  readonly node: MarkdownRemark;
  readonly previous: Maybe<MarkdownRemark>;
};

type MarkdownRemarkFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly excerptAst: InputMaybe<FieldSelectorEnum>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFieldSelector>;
  readonly headings: InputMaybe<MarkdownHeadingFieldSelector>;
  readonly html: InputMaybe<FieldSelectorEnum>;
  readonly htmlAst: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly rawMarkdownBody: InputMaybe<FieldSelectorEnum>;
  readonly tableOfContents: InputMaybe<FieldSelectorEnum>;
  readonly timeToRead: InputMaybe<FieldSelectorEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountFieldSelector>;
};

type MarkdownRemarkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly excerptAst: InputMaybe<JSONQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  readonly headings: InputMaybe<MarkdownHeadingFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly htmlAst: InputMaybe<JSONQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  readonly tableOfContents: InputMaybe<StringQueryOperatorInput>;
  readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};

type MarkdownRemarkFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFilterInput>;
};

type MarkdownRemarkFrontmatter = {
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterFieldSelector = {
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterFilterInput = {
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterSortInput = {
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkGroupConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkGroupConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly excerptAst: InputMaybe<SortOrderEnum>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterSortInput>;
  readonly headings: InputMaybe<MarkdownHeadingSortInput>;
  readonly html: InputMaybe<SortOrderEnum>;
  readonly htmlAst: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly rawMarkdownBody: InputMaybe<SortOrderEnum>;
  readonly tableOfContents: InputMaybe<SortOrderEnum>;
  readonly timeToRead: InputMaybe<SortOrderEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountSortInput>;
};

type MarkdownWordCount = {
  readonly paragraphs: Maybe<Scalars['Int']>;
  readonly sentences: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MarkdownWordCountFieldSelector = {
  readonly paragraphs: InputMaybe<FieldSelectorEnum>;
  readonly sentences: InputMaybe<FieldSelectorEnum>;
  readonly words: InputMaybe<FieldSelectorEnum>;
};

type MarkdownWordCountFilterInput = {
  readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
  readonly sentences: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type MarkdownWordCountSortInput = {
  readonly paragraphs: InputMaybe<SortOrderEnum>;
  readonly sentences: InputMaybe<SortOrderEnum>;
  readonly words: InputMaybe<SortOrderEnum>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allMarkdownRemark: MarkdownRemarkConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allStrapiAward: STRAPI_AWARDConnection;
  readonly allStrapiCommunityEntry: STRAPI_COMMUNITY_ENTRYConnection;
  readonly allStrapiCommunityEntryDescriptionTextnode: STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEConnection;
  readonly allStrapiComponentAwardAward: STRAPI__COMPONENT_AWARD_AWARDConnection;
  readonly allStrapiComponentAwardAwardDescriptionTextnode: STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEConnection;
  readonly allStrapiComponentImageCopyrightImage: STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEConnection;
  readonly allStrapiComponentLinksLinks: STRAPI__COMPONENT_LINKS_LINKSConnection;
  readonly allStrapiExample: STRAPI_EXAMPLEConnection;
  readonly allStrapiExampleAuthoritiesTextnode: STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEConnection;
  readonly allStrapiExampleChallengesTextnode: STRAPI_EXAMPLE_CHALLENGES_TEXTNODEConnection;
  readonly allStrapiExampleCommunicationTextnode: STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEConnection;
  readonly allStrapiExampleDescriptionTextnode: STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEConnection;
  readonly allStrapiExampleFundingTextnode: STRAPI_EXAMPLE_FUNDING_TEXTNODEConnection;
  readonly allStrapiExampleGoalsTextnode: STRAPI_EXAMPLE_GOALS_TEXTNODEConnection;
  readonly allStrapiExampleLocalchallengesTextnode: STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEConnection;
  readonly allStrapiExampleNotesTextnode: STRAPI_EXAMPLE_NOTES_TEXTNODEConnection;
  readonly allStrapiExampleParticularitiesTextnode: STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEConnection;
  readonly allStrapiExamplePersonnelexpensesTextnode: STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEConnection;
  readonly allStrapiExampleRelatedofficeTextnode: STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEConnection;
  readonly allStrapiExampleResultsTextnode: STRAPI_EXAMPLE_RESULTS_TEXTNODEConnection;
  readonly allStrapiExampleSourcesTextnode: STRAPI_EXAMPLE_SOURCES_TEXTNODEConnection;
  readonly allStrapiExampleStakeholdersTextnode: STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEConnection;
  readonly allStrapiMeasure: STRAPI_MEASUREConnection;
  readonly allStrapiMeasureDescriptionTextnode: STRAPI_MEASURE_DESCRIPTION_TEXTNODEConnection;
  readonly allStrapiMedia: STRAPI__MEDIAConnection;
  readonly allStrapiTopic: STRAPI_TOPICConnection;
  readonly allStrapiTopicDescriptionTextnode: STRAPI_TOPIC_DESCRIPTION_TEXTNODEConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly markdownRemark: Maybe<MarkdownRemark>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly strapiAward: Maybe<STRAPI_AWARD>;
  readonly strapiCommunityEntry: Maybe<STRAPI_COMMUNITY_ENTRY>;
  readonly strapiCommunityEntryDescriptionTextnode: Maybe<STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODE>;
  readonly strapiComponentAwardAward: Maybe<STRAPI__COMPONENT_AWARD_AWARD>;
  readonly strapiComponentAwardAwardDescriptionTextnode: Maybe<STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODE>;
  readonly strapiComponentImageCopyrightImage: Maybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGE>;
  readonly strapiComponentLinksLinks: Maybe<STRAPI__COMPONENT_LINKS_LINKS>;
  readonly strapiExample: Maybe<STRAPI_EXAMPLE>;
  readonly strapiExampleAuthoritiesTextnode: Maybe<STRAPI_EXAMPLE_AUTHORITIES_TEXTNODE>;
  readonly strapiExampleChallengesTextnode: Maybe<STRAPI_EXAMPLE_CHALLENGES_TEXTNODE>;
  readonly strapiExampleCommunicationTextnode: Maybe<STRAPI_EXAMPLE_COMMUNICATION_TEXTNODE>;
  readonly strapiExampleDescriptionTextnode: Maybe<STRAPI_EXAMPLE_DESCRIPTION_TEXTNODE>;
  readonly strapiExampleFundingTextnode: Maybe<STRAPI_EXAMPLE_FUNDING_TEXTNODE>;
  readonly strapiExampleGoalsTextnode: Maybe<STRAPI_EXAMPLE_GOALS_TEXTNODE>;
  readonly strapiExampleLocalchallengesTextnode: Maybe<STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODE>;
  readonly strapiExampleNotesTextnode: Maybe<STRAPI_EXAMPLE_NOTES_TEXTNODE>;
  readonly strapiExampleParticularitiesTextnode: Maybe<STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODE>;
  readonly strapiExamplePersonnelexpensesTextnode: Maybe<STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODE>;
  readonly strapiExampleRelatedofficeTextnode: Maybe<STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODE>;
  readonly strapiExampleResultsTextnode: Maybe<STRAPI_EXAMPLE_RESULTS_TEXTNODE>;
  readonly strapiExampleSourcesTextnode: Maybe<STRAPI_EXAMPLE_SOURCES_TEXTNODE>;
  readonly strapiExampleStakeholdersTextnode: Maybe<STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODE>;
  readonly strapiMeasure: Maybe<STRAPI_MEASURE>;
  readonly strapiMeasureDescriptionTextnode: Maybe<STRAPI_MEASURE_DESCRIPTION_TEXTNODE>;
  readonly strapiMedia: Maybe<STRAPI__MEDIA>;
  readonly strapiTopic: Maybe<STRAPI_TOPIC>;
  readonly strapiTopicDescriptionTextnode: Maybe<STRAPI_TOPIC_DESCRIPTION_TEXTNODE>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allMarkdownRemarkArgs = {
  filter: InputMaybe<MarkdownRemarkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<MarkdownRemarkSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_allStrapiAwardArgs = {
  filter: InputMaybe<STRAPI_AWARDFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_AWARDSortInput>>>;
};


type Query_allStrapiCommunityEntryArgs = {
  filter: InputMaybe<STRAPI_COMMUNITY_ENTRYFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_COMMUNITY_ENTRYSortInput>>>;
};


type Query_allStrapiCommunityEntryDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODESortInput>>>;
};


type Query_allStrapiComponentAwardAwardArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_AWARD_AWARDFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_AWARD_AWARDSortInput>>>;
};


type Query_allStrapiComponentAwardAwardDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODESortInput>>>;
};


type Query_allStrapiComponentImageCopyrightImageArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGESortInput>>>;
};


type Query_allStrapiComponentLinksLinksArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_LINKS_LINKSSortInput>>>;
};


type Query_allStrapiExampleArgs = {
  filter: InputMaybe<STRAPI_EXAMPLEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EXAMPLESortInput>>>;
};


type Query_allStrapiExampleAuthoritiesTextnodeArgs = {
  filter: InputMaybe<STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EXAMPLE_AUTHORITIES_TEXTNODESortInput>>>;
};


type Query_allStrapiExampleChallengesTextnodeArgs = {
  filter: InputMaybe<STRAPI_EXAMPLE_CHALLENGES_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EXAMPLE_CHALLENGES_TEXTNODESortInput>>>;
};


type Query_allStrapiExampleCommunicationTextnodeArgs = {
  filter: InputMaybe<STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EXAMPLE_COMMUNICATION_TEXTNODESortInput>>>;
};


type Query_allStrapiExampleDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EXAMPLE_DESCRIPTION_TEXTNODESortInput>>>;
};


type Query_allStrapiExampleFundingTextnodeArgs = {
  filter: InputMaybe<STRAPI_EXAMPLE_FUNDING_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EXAMPLE_FUNDING_TEXTNODESortInput>>>;
};


type Query_allStrapiExampleGoalsTextnodeArgs = {
  filter: InputMaybe<STRAPI_EXAMPLE_GOALS_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EXAMPLE_GOALS_TEXTNODESortInput>>>;
};


type Query_allStrapiExampleLocalchallengesTextnodeArgs = {
  filter: InputMaybe<STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODESortInput>>>;
};


type Query_allStrapiExampleNotesTextnodeArgs = {
  filter: InputMaybe<STRAPI_EXAMPLE_NOTES_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EXAMPLE_NOTES_TEXTNODESortInput>>>;
};


type Query_allStrapiExampleParticularitiesTextnodeArgs = {
  filter: InputMaybe<STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODESortInput>>>;
};


type Query_allStrapiExamplePersonnelexpensesTextnodeArgs = {
  filter: InputMaybe<STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODESortInput>>>;
};


type Query_allStrapiExampleRelatedofficeTextnodeArgs = {
  filter: InputMaybe<STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODESortInput>>>;
};


type Query_allStrapiExampleResultsTextnodeArgs = {
  filter: InputMaybe<STRAPI_EXAMPLE_RESULTS_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EXAMPLE_RESULTS_TEXTNODESortInput>>>;
};


type Query_allStrapiExampleSourcesTextnodeArgs = {
  filter: InputMaybe<STRAPI_EXAMPLE_SOURCES_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EXAMPLE_SOURCES_TEXTNODESortInput>>>;
};


type Query_allStrapiExampleStakeholdersTextnodeArgs = {
  filter: InputMaybe<STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODESortInput>>>;
};


type Query_allStrapiMeasureArgs = {
  filter: InputMaybe<STRAPI_MEASUREFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_MEASURESortInput>>>;
};


type Query_allStrapiMeasureDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_MEASURE_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_MEASURE_DESCRIPTION_TEXTNODESortInput>>>;
};


type Query_allStrapiMediaArgs = {
  filter: InputMaybe<STRAPI__MEDIAFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__MEDIASortInput>>>;
};


type Query_allStrapiTopicArgs = {
  filter: InputMaybe<STRAPI_TOPICFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_TOPICSortInput>>>;
};


type Query_allStrapiTopicDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_TOPIC_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_TOPIC_DESCRIPTION_TEXTNODESortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_markdownRemarkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  excerptAst: InputMaybe<JSONQueryOperatorInput>;
  frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  headings: InputMaybe<MarkdownHeadingFilterListInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  htmlAst: InputMaybe<JSONQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  tableOfContents: InputMaybe<StringQueryOperatorInput>;
  timeToRead: InputMaybe<IntQueryOperatorInput>;
  wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiAwardArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  logo: InputMaybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiCommunityEntryArgs = {
  author: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  commune: InputMaybe<StringQueryOperatorInput>;
  contact: InputMaybe<StringQueryOperatorInput>;
  countryState: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<STRAPI_COMMUNITY_ENTRYDescriptionFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  subcategory: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  website: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFilterInput>;
};


type Query_strapiCommunityEntryDescriptionTextnodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiComponentAwardAwardArgs = {
  award: InputMaybe<STRAPI_AWARDFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<STRAPI__COMPONENT_AWARD_AWARDDescriptionFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiComponentAwardAwardDescriptionTextnodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiComponentImageCopyrightImageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  copyright: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<STRAPI__MEDIAFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiComponentLinksLinksArgs = {
  children: InputMaybe<NodeFilterListInput>;
  display: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiExampleArgs = {
  authorities: InputMaybe<STRAPI_EXAMPLEAuthoritiesFilterInput>;
  awards: InputMaybe<STRAPI__COMPONENT_AWARD_AWARDFilterListInput>;
  beginnerFriendly: InputMaybe<BooleanQueryOperatorInput>;
  centrality: InputMaybe<StringQueryOperatorInput>;
  challenges: InputMaybe<STRAPI_EXAMPLEChallengesFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  commune: InputMaybe<StringQueryOperatorInput>;
  communication: InputMaybe<STRAPI_EXAMPLECommunicationFilterInput>;
  costs: InputMaybe<StringQueryOperatorInput>;
  countryState: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<STRAPI_EXAMPLEDescriptionFilterInput>;
  financiallyWeak: InputMaybe<BooleanQueryOperatorInput>;
  funding: InputMaybe<STRAPI_EXAMPLEFundingFilterInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  goals: InputMaybe<STRAPI_EXAMPLEGoalsFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFilterListInput>;
  localChallenges: InputMaybe<STRAPI_EXAMPLELocalChallengesFilterInput>;
  measure: InputMaybe<STRAPI_MEASUREFilterInput>;
  notes: InputMaybe<STRAPI_EXAMPLENotesFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  particularities: InputMaybe<STRAPI_EXAMPLEParticularitiesFilterInput>;
  period: InputMaybe<StringQueryOperatorInput>;
  personnelExpenses: InputMaybe<STRAPI_EXAMPLEPersonnelExpensesFilterInput>;
  population: InputMaybe<StringQueryOperatorInput>;
  position: InputMaybe<IntQueryOperatorInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  relatedOffice: InputMaybe<STRAPI_EXAMPLERelatedOfficeFilterInput>;
  relatedTopic: InputMaybe<STRAPI_TOPICFilterInput>;
  results: InputMaybe<STRAPI_EXAMPLEResultsFilterInput>;
  shortDescription: InputMaybe<StringQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  sources: InputMaybe<STRAPI_EXAMPLESourcesFilterInput>;
  spatialStructure: InputMaybe<StringQueryOperatorInput>;
  stakeholders: InputMaybe<STRAPI_EXAMPLEStakeholdersFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  subcategory: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiExampleAuthoritiesTextnodeArgs = {
  authorities: InputMaybe<StringQueryOperatorInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiExampleChallengesTextnodeArgs = {
  challenges: InputMaybe<StringQueryOperatorInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiExampleCommunicationTextnodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  communication: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiExampleDescriptionTextnodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiExampleFundingTextnodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  funding: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiExampleGoalsTextnodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  goals: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiExampleLocalchallengesTextnodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  localChallenges: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiExampleNotesTextnodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  notes: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiExampleParticularitiesTextnodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  particularities: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiExamplePersonnelexpensesTextnodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  personnelExpenses: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiExampleRelatedofficeTextnodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  relatedOffice: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiExampleResultsTextnodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  results: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiExampleSourcesTextnodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sources: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiExampleStakeholdersTextnodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  stakeholders: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiMeasureArgs = {
  additionalResources: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  communityEntries: InputMaybe<STRAPI_COMMUNITY_ENTRYFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<STRAPI_MEASUREDescriptionFilterInput>;
  examples: InputMaybe<STRAPI_EXAMPLEFilterListInput>;
  fundings: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFilterListInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  guidelines: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  position: InputMaybe<IntQueryOperatorInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  shortDescription: InputMaybe<StringQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  topic: InputMaybe<STRAPI_TOPICFilterInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiMeasureDescriptionTextnodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiMediaArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  formats: InputMaybe<STRAPI__MEDIAFormatsFilterInput>;
  hash: InputMaybe<StringQueryOperatorInput>;
  height: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  localFile: InputMaybe<FileFilterInput>;
  mime: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  size: InputMaybe<FloatQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  width: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiTopicArgs = {
  additionalResources: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<STRAPI_TOPICDescriptionFilterInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  guidelines: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<STRAPI__MEDIAFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  measures: InputMaybe<STRAPI_MEASUREFilterListInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  position: InputMaybe<IntQueryOperatorInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  shortDescription: InputMaybe<StringQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiTopicDescriptionTextnodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_AWARD = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly logo: Maybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGE>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_AWARD_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_AWARD_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_AWARD_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_AWARDConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_AWARDEdge>;
  readonly group: ReadonlyArray<STRAPI_AWARDGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_AWARD>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_AWARDConnection_distinctArgs = {
  field: STRAPI_AWARDFieldSelector;
};


type STRAPI_AWARDConnection_groupArgs = {
  field: STRAPI_AWARDFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_AWARDConnection_maxArgs = {
  field: STRAPI_AWARDFieldSelector;
};


type STRAPI_AWARDConnection_minArgs = {
  field: STRAPI_AWARDFieldSelector;
};


type STRAPI_AWARDConnection_sumArgs = {
  field: STRAPI_AWARDFieldSelector;
};

type STRAPI_AWARDEdge = {
  readonly next: Maybe<STRAPI_AWARD>;
  readonly node: STRAPI_AWARD;
  readonly previous: Maybe<STRAPI_AWARD>;
};

type STRAPI_AWARDFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly logo: InputMaybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_AWARDFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly logo: InputMaybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_AWARDGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_AWARDEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_AWARDGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_AWARD>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_AWARDGroupConnection_distinctArgs = {
  field: STRAPI_AWARDFieldSelector;
};


type STRAPI_AWARDGroupConnection_groupArgs = {
  field: STRAPI_AWARDFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_AWARDGroupConnection_maxArgs = {
  field: STRAPI_AWARDFieldSelector;
};


type STRAPI_AWARDGroupConnection_minArgs = {
  field: STRAPI_AWARDFieldSelector;
};


type STRAPI_AWARDGroupConnection_sumArgs = {
  field: STRAPI_AWARDFieldSelector;
};

type STRAPI_AWARDSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly logo: InputMaybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGESortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_COMMUNITY_ENTRY = Node & {
  readonly author: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly commune: Maybe<Scalars['String']>;
  readonly contact: Maybe<Scalars['String']>;
  readonly countryState: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<STRAPI_COMMUNITY_ENTRYDescription>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGE>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly subcategory: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly website: Maybe<STRAPI__COMPONENT_LINKS_LINKS>;
};


type STRAPI_COMMUNITY_ENTRY_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_COMMUNITY_ENTRY_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_COMMUNITY_ENTRY_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_COMMUNITY_ENTRYConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_COMMUNITY_ENTRYEdge>;
  readonly group: ReadonlyArray<STRAPI_COMMUNITY_ENTRYGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_COMMUNITY_ENTRY>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_COMMUNITY_ENTRYConnection_distinctArgs = {
  field: STRAPI_COMMUNITY_ENTRYFieldSelector;
};


type STRAPI_COMMUNITY_ENTRYConnection_groupArgs = {
  field: STRAPI_COMMUNITY_ENTRYFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_COMMUNITY_ENTRYConnection_maxArgs = {
  field: STRAPI_COMMUNITY_ENTRYFieldSelector;
};


type STRAPI_COMMUNITY_ENTRYConnection_minArgs = {
  field: STRAPI_COMMUNITY_ENTRYFieldSelector;
};


type STRAPI_COMMUNITY_ENTRYConnection_sumArgs = {
  field: STRAPI_COMMUNITY_ENTRYFieldSelector;
};

type STRAPI_COMMUNITY_ENTRYDescription = {
  readonly data: Maybe<STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODE>;
};

type STRAPI_COMMUNITY_ENTRYDescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI_COMMUNITY_ENTRYDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_COMMUNITY_ENTRYDescriptionSortInput = {
  readonly data: InputMaybe<STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODESortInput>;
};

type STRAPI_COMMUNITY_ENTRYEdge = {
  readonly next: Maybe<STRAPI_COMMUNITY_ENTRY>;
  readonly node: STRAPI_COMMUNITY_ENTRY;
  readonly previous: Maybe<STRAPI_COMMUNITY_ENTRY>;
};

type STRAPI_COMMUNITY_ENTRYFieldSelector = {
  readonly author: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly commune: InputMaybe<FieldSelectorEnum>;
  readonly contact: InputMaybe<FieldSelectorEnum>;
  readonly countryState: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<STRAPI_COMMUNITY_ENTRYDescriptionFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly subcategory: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly website: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFieldSelector>;
};

type STRAPI_COMMUNITY_ENTRYFilterInput = {
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly commune: InputMaybe<StringQueryOperatorInput>;
  readonly contact: InputMaybe<StringQueryOperatorInput>;
  readonly countryState: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<STRAPI_COMMUNITY_ENTRYDescriptionFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly subcategory: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly website: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFilterInput>;
};

type STRAPI_COMMUNITY_ENTRYFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_COMMUNITY_ENTRYFilterInput>;
};

type STRAPI_COMMUNITY_ENTRYGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_COMMUNITY_ENTRYEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_COMMUNITY_ENTRYGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_COMMUNITY_ENTRY>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_COMMUNITY_ENTRYGroupConnection_distinctArgs = {
  field: STRAPI_COMMUNITY_ENTRYFieldSelector;
};


type STRAPI_COMMUNITY_ENTRYGroupConnection_groupArgs = {
  field: STRAPI_COMMUNITY_ENTRYFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_COMMUNITY_ENTRYGroupConnection_maxArgs = {
  field: STRAPI_COMMUNITY_ENTRYFieldSelector;
};


type STRAPI_COMMUNITY_ENTRYGroupConnection_minArgs = {
  field: STRAPI_COMMUNITY_ENTRYFieldSelector;
};


type STRAPI_COMMUNITY_ENTRYGroupConnection_sumArgs = {
  field: STRAPI_COMMUNITY_ENTRYFieldSelector;
};

type STRAPI_COMMUNITY_ENTRYSortInput = {
  readonly author: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly commune: InputMaybe<SortOrderEnum>;
  readonly contact: InputMaybe<SortOrderEnum>;
  readonly countryState: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<STRAPI_COMMUNITY_ENTRYDescriptionSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGESortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly subcategory: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly website: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSSortInput>;
};

type STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODE = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODE>;
};

type STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_COMMUNITY_ENTRY_DESCRIPTION_TEXTNODESortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_EXAMPLE = Node & {
  readonly authorities: Maybe<STRAPI_EXAMPLEAuthorities>;
  readonly awards: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_AWARD_AWARD>>>;
  readonly beginnerFriendly: Maybe<Scalars['Boolean']>;
  readonly centrality: Maybe<Scalars['String']>;
  readonly challenges: Maybe<STRAPI_EXAMPLEChallenges>;
  readonly children: ReadonlyArray<Node>;
  readonly commune: Maybe<Scalars['String']>;
  readonly communication: Maybe<STRAPI_EXAMPLECommunication>;
  readonly costs: Maybe<Scalars['String']>;
  readonly countryState: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<STRAPI_EXAMPLEDescription>;
  readonly financiallyWeak: Maybe<Scalars['Boolean']>;
  readonly funding: Maybe<STRAPI_EXAMPLEFunding>;
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly goals: Maybe<STRAPI_EXAMPLEGoals>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGE>;
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_LINKS_LINKS>>>;
  readonly localChallenges: Maybe<STRAPI_EXAMPLELocalChallenges>;
  readonly measure: Maybe<STRAPI_MEASURE>;
  readonly notes: Maybe<STRAPI_EXAMPLENotes>;
  readonly parent: Maybe<Node>;
  readonly particularities: Maybe<STRAPI_EXAMPLEParticularities>;
  readonly period: Maybe<Scalars['String']>;
  readonly personnelExpenses: Maybe<STRAPI_EXAMPLEPersonnelExpenses>;
  readonly population: Maybe<Scalars['String']>;
  readonly position: Maybe<Scalars['Int']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly relatedOffice: Maybe<STRAPI_EXAMPLERelatedOffice>;
  readonly relatedTopic: Maybe<STRAPI_TOPIC>;
  readonly results: Maybe<STRAPI_EXAMPLEResults>;
  readonly shortDescription: Maybe<Scalars['String']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly sources: Maybe<STRAPI_EXAMPLESources>;
  readonly spatialStructure: Maybe<Scalars['String']>;
  readonly stakeholders: Maybe<STRAPI_EXAMPLEStakeholders>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly subcategory: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_EXAMPLE_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_EXAMPLE_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};


type STRAPI_EXAMPLE_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_EXAMPLE_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_EXAMPLEAuthorities = {
  readonly data: Maybe<STRAPI_EXAMPLE_AUTHORITIES_TEXTNODE>;
};

type STRAPI_EXAMPLEAuthoritiesFieldSelector = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEFieldSelector>;
};

type STRAPI_EXAMPLEAuthoritiesFilterInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEFilterInput>;
};

type STRAPI_EXAMPLEAuthoritiesSortInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_AUTHORITIES_TEXTNODESortInput>;
};

type STRAPI_EXAMPLEChallenges = {
  readonly data: Maybe<STRAPI_EXAMPLE_CHALLENGES_TEXTNODE>;
};

type STRAPI_EXAMPLEChallengesFieldSelector = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_CHALLENGES_TEXTNODEFieldSelector>;
};

type STRAPI_EXAMPLEChallengesFilterInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_CHALLENGES_TEXTNODEFilterInput>;
};

type STRAPI_EXAMPLEChallengesSortInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_CHALLENGES_TEXTNODESortInput>;
};

type STRAPI_EXAMPLECommunication = {
  readonly data: Maybe<STRAPI_EXAMPLE_COMMUNICATION_TEXTNODE>;
};

type STRAPI_EXAMPLECommunicationFieldSelector = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEFieldSelector>;
};

type STRAPI_EXAMPLECommunicationFilterInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEFilterInput>;
};

type STRAPI_EXAMPLECommunicationSortInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_COMMUNICATION_TEXTNODESortInput>;
};

type STRAPI_EXAMPLEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLEEdge>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLEConnection_distinctArgs = {
  field: STRAPI_EXAMPLEFieldSelector;
};


type STRAPI_EXAMPLEConnection_groupArgs = {
  field: STRAPI_EXAMPLEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLEConnection_maxArgs = {
  field: STRAPI_EXAMPLEFieldSelector;
};


type STRAPI_EXAMPLEConnection_minArgs = {
  field: STRAPI_EXAMPLEFieldSelector;
};


type STRAPI_EXAMPLEConnection_sumArgs = {
  field: STRAPI_EXAMPLEFieldSelector;
};

type STRAPI_EXAMPLEDescription = {
  readonly data: Maybe<STRAPI_EXAMPLE_DESCRIPTION_TEXTNODE>;
};

type STRAPI_EXAMPLEDescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI_EXAMPLEDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_EXAMPLEDescriptionSortInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_DESCRIPTION_TEXTNODESortInput>;
};

type STRAPI_EXAMPLEEdge = {
  readonly next: Maybe<STRAPI_EXAMPLE>;
  readonly node: STRAPI_EXAMPLE;
  readonly previous: Maybe<STRAPI_EXAMPLE>;
};

type STRAPI_EXAMPLEFieldSelector = {
  readonly authorities: InputMaybe<STRAPI_EXAMPLEAuthoritiesFieldSelector>;
  readonly awards: InputMaybe<STRAPI__COMPONENT_AWARD_AWARDFieldSelector>;
  readonly beginnerFriendly: InputMaybe<FieldSelectorEnum>;
  readonly centrality: InputMaybe<FieldSelectorEnum>;
  readonly challenges: InputMaybe<STRAPI_EXAMPLEChallengesFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly commune: InputMaybe<FieldSelectorEnum>;
  readonly communication: InputMaybe<STRAPI_EXAMPLECommunicationFieldSelector>;
  readonly costs: InputMaybe<FieldSelectorEnum>;
  readonly countryState: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<STRAPI_EXAMPLEDescriptionFieldSelector>;
  readonly financiallyWeak: InputMaybe<FieldSelectorEnum>;
  readonly funding: InputMaybe<STRAPI_EXAMPLEFundingFieldSelector>;
  readonly gatsbyPath: InputMaybe<FieldSelectorEnum>;
  readonly goals: InputMaybe<STRAPI_EXAMPLEGoalsFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFieldSelector>;
  readonly localChallenges: InputMaybe<STRAPI_EXAMPLELocalChallengesFieldSelector>;
  readonly measure: InputMaybe<STRAPI_MEASUREFieldSelector>;
  readonly notes: InputMaybe<STRAPI_EXAMPLENotesFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly particularities: InputMaybe<STRAPI_EXAMPLEParticularitiesFieldSelector>;
  readonly period: InputMaybe<FieldSelectorEnum>;
  readonly personnelExpenses: InputMaybe<STRAPI_EXAMPLEPersonnelExpensesFieldSelector>;
  readonly population: InputMaybe<FieldSelectorEnum>;
  readonly position: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly relatedOffice: InputMaybe<STRAPI_EXAMPLERelatedOfficeFieldSelector>;
  readonly relatedTopic: InputMaybe<STRAPI_TOPICFieldSelector>;
  readonly results: InputMaybe<STRAPI_EXAMPLEResultsFieldSelector>;
  readonly shortDescription: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly sources: InputMaybe<STRAPI_EXAMPLESourcesFieldSelector>;
  readonly spatialStructure: InputMaybe<FieldSelectorEnum>;
  readonly stakeholders: InputMaybe<STRAPI_EXAMPLEStakeholdersFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly subcategory: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_EXAMPLEFilterInput = {
  readonly authorities: InputMaybe<STRAPI_EXAMPLEAuthoritiesFilterInput>;
  readonly awards: InputMaybe<STRAPI__COMPONENT_AWARD_AWARDFilterListInput>;
  readonly beginnerFriendly: InputMaybe<BooleanQueryOperatorInput>;
  readonly centrality: InputMaybe<StringQueryOperatorInput>;
  readonly challenges: InputMaybe<STRAPI_EXAMPLEChallengesFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly commune: InputMaybe<StringQueryOperatorInput>;
  readonly communication: InputMaybe<STRAPI_EXAMPLECommunicationFilterInput>;
  readonly costs: InputMaybe<StringQueryOperatorInput>;
  readonly countryState: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<STRAPI_EXAMPLEDescriptionFilterInput>;
  readonly financiallyWeak: InputMaybe<BooleanQueryOperatorInput>;
  readonly funding: InputMaybe<STRAPI_EXAMPLEFundingFilterInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly goals: InputMaybe<STRAPI_EXAMPLEGoalsFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFilterListInput>;
  readonly localChallenges: InputMaybe<STRAPI_EXAMPLELocalChallengesFilterInput>;
  readonly measure: InputMaybe<STRAPI_MEASUREFilterInput>;
  readonly notes: InputMaybe<STRAPI_EXAMPLENotesFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly particularities: InputMaybe<STRAPI_EXAMPLEParticularitiesFilterInput>;
  readonly period: InputMaybe<StringQueryOperatorInput>;
  readonly personnelExpenses: InputMaybe<STRAPI_EXAMPLEPersonnelExpensesFilterInput>;
  readonly population: InputMaybe<StringQueryOperatorInput>;
  readonly position: InputMaybe<IntQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly relatedOffice: InputMaybe<STRAPI_EXAMPLERelatedOfficeFilterInput>;
  readonly relatedTopic: InputMaybe<STRAPI_TOPICFilterInput>;
  readonly results: InputMaybe<STRAPI_EXAMPLEResultsFilterInput>;
  readonly shortDescription: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly sources: InputMaybe<STRAPI_EXAMPLESourcesFilterInput>;
  readonly spatialStructure: InputMaybe<StringQueryOperatorInput>;
  readonly stakeholders: InputMaybe<STRAPI_EXAMPLEStakeholdersFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly subcategory: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_EXAMPLEFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_EXAMPLEFilterInput>;
};

type STRAPI_EXAMPLEFunding = {
  readonly data: Maybe<STRAPI_EXAMPLE_FUNDING_TEXTNODE>;
};

type STRAPI_EXAMPLEFundingFieldSelector = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_FUNDING_TEXTNODEFieldSelector>;
};

type STRAPI_EXAMPLEFundingFilterInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_FUNDING_TEXTNODEFilterInput>;
};

type STRAPI_EXAMPLEFundingSortInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_FUNDING_TEXTNODESortInput>;
};

type STRAPI_EXAMPLEGoals = {
  readonly data: Maybe<STRAPI_EXAMPLE_GOALS_TEXTNODE>;
};

type STRAPI_EXAMPLEGoalsFieldSelector = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_GOALS_TEXTNODEFieldSelector>;
};

type STRAPI_EXAMPLEGoalsFilterInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_GOALS_TEXTNODEFilterInput>;
};

type STRAPI_EXAMPLEGoalsSortInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_GOALS_TEXTNODESortInput>;
};

type STRAPI_EXAMPLEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLEGroupConnection_distinctArgs = {
  field: STRAPI_EXAMPLEFieldSelector;
};


type STRAPI_EXAMPLEGroupConnection_groupArgs = {
  field: STRAPI_EXAMPLEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLEGroupConnection_maxArgs = {
  field: STRAPI_EXAMPLEFieldSelector;
};


type STRAPI_EXAMPLEGroupConnection_minArgs = {
  field: STRAPI_EXAMPLEFieldSelector;
};


type STRAPI_EXAMPLEGroupConnection_sumArgs = {
  field: STRAPI_EXAMPLEFieldSelector;
};

type STRAPI_EXAMPLELocalChallenges = {
  readonly data: Maybe<STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODE>;
};

type STRAPI_EXAMPLELocalChallengesFieldSelector = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEFieldSelector>;
};

type STRAPI_EXAMPLELocalChallengesFilterInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEFilterInput>;
};

type STRAPI_EXAMPLELocalChallengesSortInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODESortInput>;
};

type STRAPI_EXAMPLENotes = {
  readonly data: Maybe<STRAPI_EXAMPLE_NOTES_TEXTNODE>;
};

type STRAPI_EXAMPLENotesFieldSelector = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_NOTES_TEXTNODEFieldSelector>;
};

type STRAPI_EXAMPLENotesFilterInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_NOTES_TEXTNODEFilterInput>;
};

type STRAPI_EXAMPLENotesSortInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_NOTES_TEXTNODESortInput>;
};

type STRAPI_EXAMPLEParticularities = {
  readonly data: Maybe<STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODE>;
};

type STRAPI_EXAMPLEParticularitiesFieldSelector = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEFieldSelector>;
};

type STRAPI_EXAMPLEParticularitiesFilterInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEFilterInput>;
};

type STRAPI_EXAMPLEParticularitiesSortInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODESortInput>;
};

type STRAPI_EXAMPLEPersonnelExpenses = {
  readonly data: Maybe<STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODE>;
};

type STRAPI_EXAMPLEPersonnelExpensesFieldSelector = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEFieldSelector>;
};

type STRAPI_EXAMPLEPersonnelExpensesFilterInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEFilterInput>;
};

type STRAPI_EXAMPLEPersonnelExpensesSortInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODESortInput>;
};

type STRAPI_EXAMPLERelatedOffice = {
  readonly data: Maybe<STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODE>;
};

type STRAPI_EXAMPLERelatedOfficeFieldSelector = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEFieldSelector>;
};

type STRAPI_EXAMPLERelatedOfficeFilterInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEFilterInput>;
};

type STRAPI_EXAMPLERelatedOfficeSortInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODESortInput>;
};

type STRAPI_EXAMPLEResults = {
  readonly data: Maybe<STRAPI_EXAMPLE_RESULTS_TEXTNODE>;
};

type STRAPI_EXAMPLEResultsFieldSelector = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_RESULTS_TEXTNODEFieldSelector>;
};

type STRAPI_EXAMPLEResultsFilterInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_RESULTS_TEXTNODEFilterInput>;
};

type STRAPI_EXAMPLEResultsSortInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_RESULTS_TEXTNODESortInput>;
};

type STRAPI_EXAMPLESortInput = {
  readonly authorities: InputMaybe<STRAPI_EXAMPLEAuthoritiesSortInput>;
  readonly awards: InputMaybe<STRAPI__COMPONENT_AWARD_AWARDSortInput>;
  readonly beginnerFriendly: InputMaybe<SortOrderEnum>;
  readonly centrality: InputMaybe<SortOrderEnum>;
  readonly challenges: InputMaybe<STRAPI_EXAMPLEChallengesSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly commune: InputMaybe<SortOrderEnum>;
  readonly communication: InputMaybe<STRAPI_EXAMPLECommunicationSortInput>;
  readonly costs: InputMaybe<SortOrderEnum>;
  readonly countryState: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<STRAPI_EXAMPLEDescriptionSortInput>;
  readonly financiallyWeak: InputMaybe<SortOrderEnum>;
  readonly funding: InputMaybe<STRAPI_EXAMPLEFundingSortInput>;
  readonly gatsbyPath: InputMaybe<SortOrderEnum>;
  readonly goals: InputMaybe<STRAPI_EXAMPLEGoalsSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGESortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly links: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSSortInput>;
  readonly localChallenges: InputMaybe<STRAPI_EXAMPLELocalChallengesSortInput>;
  readonly measure: InputMaybe<STRAPI_MEASURESortInput>;
  readonly notes: InputMaybe<STRAPI_EXAMPLENotesSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly particularities: InputMaybe<STRAPI_EXAMPLEParticularitiesSortInput>;
  readonly period: InputMaybe<SortOrderEnum>;
  readonly personnelExpenses: InputMaybe<STRAPI_EXAMPLEPersonnelExpensesSortInput>;
  readonly population: InputMaybe<SortOrderEnum>;
  readonly position: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly relatedOffice: InputMaybe<STRAPI_EXAMPLERelatedOfficeSortInput>;
  readonly relatedTopic: InputMaybe<STRAPI_TOPICSortInput>;
  readonly results: InputMaybe<STRAPI_EXAMPLEResultsSortInput>;
  readonly shortDescription: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly sources: InputMaybe<STRAPI_EXAMPLESourcesSortInput>;
  readonly spatialStructure: InputMaybe<SortOrderEnum>;
  readonly stakeholders: InputMaybe<STRAPI_EXAMPLEStakeholdersSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly subcategory: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_EXAMPLESources = {
  readonly data: Maybe<STRAPI_EXAMPLE_SOURCES_TEXTNODE>;
};

type STRAPI_EXAMPLESourcesFieldSelector = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_SOURCES_TEXTNODEFieldSelector>;
};

type STRAPI_EXAMPLESourcesFilterInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_SOURCES_TEXTNODEFilterInput>;
};

type STRAPI_EXAMPLESourcesSortInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_SOURCES_TEXTNODESortInput>;
};

type STRAPI_EXAMPLEStakeholders = {
  readonly data: Maybe<STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODE>;
};

type STRAPI_EXAMPLEStakeholdersFieldSelector = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEFieldSelector>;
};

type STRAPI_EXAMPLEStakeholdersFilterInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEFilterInput>;
};

type STRAPI_EXAMPLEStakeholdersSortInput = {
  readonly data: InputMaybe<STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODESortInput>;
};

type STRAPI_EXAMPLE_AUTHORITIES_TEXTNODE = Node & {
  readonly authorities: Maybe<Scalars['String']>;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_AUTHORITIES_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEConnection_groupArgs = {
  field: STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEConnection_maxArgs = {
  field: STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEConnection_minArgs = {
  field: STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEConnection_sumArgs = {
  field: STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_EXAMPLE_AUTHORITIES_TEXTNODE>;
  readonly node: STRAPI_EXAMPLE_AUTHORITIES_TEXTNODE;
  readonly previous: Maybe<STRAPI_EXAMPLE_AUTHORITIES_TEXTNODE>;
};

type STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEFieldSelector = {
  readonly authorities: InputMaybe<FieldSelectorEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEFilterInput = {
  readonly authorities: InputMaybe<StringQueryOperatorInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_AUTHORITIES_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_EXAMPLE_AUTHORITIES_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_AUTHORITIES_TEXTNODESortInput = {
  readonly authorities: InputMaybe<SortOrderEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_EXAMPLE_CHALLENGES_TEXTNODE = Node & {
  readonly challenges: Maybe<Scalars['String']>;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_EXAMPLE_CHALLENGES_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_CHALLENGES_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_CHALLENGES_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_CHALLENGES_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_CHALLENGES_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_CHALLENGES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_CHALLENGES_TEXTNODEConnection_groupArgs = {
  field: STRAPI_EXAMPLE_CHALLENGES_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_CHALLENGES_TEXTNODEConnection_maxArgs = {
  field: STRAPI_EXAMPLE_CHALLENGES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_CHALLENGES_TEXTNODEConnection_minArgs = {
  field: STRAPI_EXAMPLE_CHALLENGES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_CHALLENGES_TEXTNODEConnection_sumArgs = {
  field: STRAPI_EXAMPLE_CHALLENGES_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_CHALLENGES_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_EXAMPLE_CHALLENGES_TEXTNODE>;
  readonly node: STRAPI_EXAMPLE_CHALLENGES_TEXTNODE;
  readonly previous: Maybe<STRAPI_EXAMPLE_CHALLENGES_TEXTNODE>;
};

type STRAPI_EXAMPLE_CHALLENGES_TEXTNODEFieldSelector = {
  readonly challenges: InputMaybe<FieldSelectorEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_EXAMPLE_CHALLENGES_TEXTNODEFilterInput = {
  readonly challenges: InputMaybe<StringQueryOperatorInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_EXAMPLE_CHALLENGES_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_CHALLENGES_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_CHALLENGES_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_CHALLENGES_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_CHALLENGES_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_CHALLENGES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_CHALLENGES_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_EXAMPLE_CHALLENGES_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_CHALLENGES_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_EXAMPLE_CHALLENGES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_CHALLENGES_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_EXAMPLE_CHALLENGES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_CHALLENGES_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_EXAMPLE_CHALLENGES_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_CHALLENGES_TEXTNODESortInput = {
  readonly challenges: InputMaybe<SortOrderEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_EXAMPLE_COMMUNICATION_TEXTNODE = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly communication: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_COMMUNICATION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEConnection_minArgs = {
  field: STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_EXAMPLE_COMMUNICATION_TEXTNODE>;
  readonly node: STRAPI_EXAMPLE_COMMUNICATION_TEXTNODE;
  readonly previous: Maybe<STRAPI_EXAMPLE_COMMUNICATION_TEXTNODE>;
};

type STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly communication: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly communication: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_COMMUNICATION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_EXAMPLE_COMMUNICATION_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_COMMUNICATION_TEXTNODESortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly communication: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_EXAMPLE_DESCRIPTION_TEXTNODE = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_EXAMPLE_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_EXAMPLE_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_EXAMPLE_DESCRIPTION_TEXTNODE>;
};

type STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_EXAMPLE_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_DESCRIPTION_TEXTNODESortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_EXAMPLE_FUNDING_TEXTNODE = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly funding: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_EXAMPLE_FUNDING_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_FUNDING_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_FUNDING_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_FUNDING_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_FUNDING_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_FUNDING_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_FUNDING_TEXTNODEConnection_groupArgs = {
  field: STRAPI_EXAMPLE_FUNDING_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_FUNDING_TEXTNODEConnection_maxArgs = {
  field: STRAPI_EXAMPLE_FUNDING_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_FUNDING_TEXTNODEConnection_minArgs = {
  field: STRAPI_EXAMPLE_FUNDING_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_FUNDING_TEXTNODEConnection_sumArgs = {
  field: STRAPI_EXAMPLE_FUNDING_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_FUNDING_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_EXAMPLE_FUNDING_TEXTNODE>;
  readonly node: STRAPI_EXAMPLE_FUNDING_TEXTNODE;
  readonly previous: Maybe<STRAPI_EXAMPLE_FUNDING_TEXTNODE>;
};

type STRAPI_EXAMPLE_FUNDING_TEXTNODEFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly funding: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_EXAMPLE_FUNDING_TEXTNODEFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly funding: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_EXAMPLE_FUNDING_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_FUNDING_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_FUNDING_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_FUNDING_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_FUNDING_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_FUNDING_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_FUNDING_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_EXAMPLE_FUNDING_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_FUNDING_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_EXAMPLE_FUNDING_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_FUNDING_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_EXAMPLE_FUNDING_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_FUNDING_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_EXAMPLE_FUNDING_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_FUNDING_TEXTNODESortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly funding: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_EXAMPLE_GOALS_TEXTNODE = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly goals: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_EXAMPLE_GOALS_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_GOALS_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_GOALS_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_GOALS_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_GOALS_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_GOALS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_GOALS_TEXTNODEConnection_groupArgs = {
  field: STRAPI_EXAMPLE_GOALS_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_GOALS_TEXTNODEConnection_maxArgs = {
  field: STRAPI_EXAMPLE_GOALS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_GOALS_TEXTNODEConnection_minArgs = {
  field: STRAPI_EXAMPLE_GOALS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_GOALS_TEXTNODEConnection_sumArgs = {
  field: STRAPI_EXAMPLE_GOALS_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_GOALS_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_EXAMPLE_GOALS_TEXTNODE>;
  readonly node: STRAPI_EXAMPLE_GOALS_TEXTNODE;
  readonly previous: Maybe<STRAPI_EXAMPLE_GOALS_TEXTNODE>;
};

type STRAPI_EXAMPLE_GOALS_TEXTNODEFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly goals: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_EXAMPLE_GOALS_TEXTNODEFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly goals: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_EXAMPLE_GOALS_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_GOALS_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_GOALS_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_GOALS_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_GOALS_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_GOALS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_GOALS_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_EXAMPLE_GOALS_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_GOALS_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_EXAMPLE_GOALS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_GOALS_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_EXAMPLE_GOALS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_GOALS_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_EXAMPLE_GOALS_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_GOALS_TEXTNODESortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly goals: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODE = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly localChallenges: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
};

type STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEConnection_groupArgs = {
  field: STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEConnection_maxArgs = {
  field: STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEConnection_minArgs = {
  field: STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEConnection_sumArgs = {
  field: STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODE>;
  readonly node: STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODE;
  readonly previous: Maybe<STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODE>;
};

type STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly localChallenges: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly localChallenges: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_LOCALCHALLENGES_TEXTNODESortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly localChallenges: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_EXAMPLE_NOTES_TEXTNODE = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly notes: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
};

type STRAPI_EXAMPLE_NOTES_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_NOTES_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_NOTES_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_NOTES_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_NOTES_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_NOTES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_NOTES_TEXTNODEConnection_groupArgs = {
  field: STRAPI_EXAMPLE_NOTES_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_NOTES_TEXTNODEConnection_maxArgs = {
  field: STRAPI_EXAMPLE_NOTES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_NOTES_TEXTNODEConnection_minArgs = {
  field: STRAPI_EXAMPLE_NOTES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_NOTES_TEXTNODEConnection_sumArgs = {
  field: STRAPI_EXAMPLE_NOTES_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_NOTES_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_EXAMPLE_NOTES_TEXTNODE>;
  readonly node: STRAPI_EXAMPLE_NOTES_TEXTNODE;
  readonly previous: Maybe<STRAPI_EXAMPLE_NOTES_TEXTNODE>;
};

type STRAPI_EXAMPLE_NOTES_TEXTNODEFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly notes: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_EXAMPLE_NOTES_TEXTNODEFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly notes: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_EXAMPLE_NOTES_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_NOTES_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_NOTES_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_NOTES_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_NOTES_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_NOTES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_NOTES_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_EXAMPLE_NOTES_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_NOTES_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_EXAMPLE_NOTES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_NOTES_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_EXAMPLE_NOTES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_NOTES_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_EXAMPLE_NOTES_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_NOTES_TEXTNODESortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly notes: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODE = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly particularities: Maybe<Scalars['String']>;
};

type STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEConnection_groupArgs = {
  field: STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEConnection_maxArgs = {
  field: STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEConnection_minArgs = {
  field: STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEConnection_sumArgs = {
  field: STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODE>;
  readonly node: STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODE;
  readonly previous: Maybe<STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODE>;
};

type STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly particularities: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly particularities: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_PARTICULARITIES_TEXTNODESortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly particularities: InputMaybe<SortOrderEnum>;
};

type STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODE = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly personnelExpenses: Maybe<Scalars['String']>;
};

type STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEConnection_groupArgs = {
  field: STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEConnection_maxArgs = {
  field: STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEConnection_minArgs = {
  field: STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEConnection_sumArgs = {
  field: STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODE>;
  readonly node: STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODE;
  readonly previous: Maybe<STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODE>;
};

type STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly personnelExpenses: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly personnelExpenses: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_PERSONNELEXPENSES_TEXTNODESortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly personnelExpenses: InputMaybe<SortOrderEnum>;
};

type STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODE = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly relatedOffice: Maybe<Scalars['String']>;
};

type STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEConnection_groupArgs = {
  field: STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEConnection_maxArgs = {
  field: STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEConnection_minArgs = {
  field: STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEConnection_sumArgs = {
  field: STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODE>;
  readonly node: STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODE;
  readonly previous: Maybe<STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODE>;
};

type STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly relatedOffice: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly relatedOffice: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_RELATEDOFFICE_TEXTNODESortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly relatedOffice: InputMaybe<SortOrderEnum>;
};

type STRAPI_EXAMPLE_RESULTS_TEXTNODE = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly results: Maybe<Scalars['String']>;
};

type STRAPI_EXAMPLE_RESULTS_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_RESULTS_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_RESULTS_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_RESULTS_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_RESULTS_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_RESULTS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_RESULTS_TEXTNODEConnection_groupArgs = {
  field: STRAPI_EXAMPLE_RESULTS_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_RESULTS_TEXTNODEConnection_maxArgs = {
  field: STRAPI_EXAMPLE_RESULTS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_RESULTS_TEXTNODEConnection_minArgs = {
  field: STRAPI_EXAMPLE_RESULTS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_RESULTS_TEXTNODEConnection_sumArgs = {
  field: STRAPI_EXAMPLE_RESULTS_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_RESULTS_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_EXAMPLE_RESULTS_TEXTNODE>;
  readonly node: STRAPI_EXAMPLE_RESULTS_TEXTNODE;
  readonly previous: Maybe<STRAPI_EXAMPLE_RESULTS_TEXTNODE>;
};

type STRAPI_EXAMPLE_RESULTS_TEXTNODEFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly results: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_EXAMPLE_RESULTS_TEXTNODEFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly results: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_EXAMPLE_RESULTS_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_RESULTS_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_RESULTS_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_RESULTS_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_RESULTS_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_RESULTS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_RESULTS_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_EXAMPLE_RESULTS_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_RESULTS_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_EXAMPLE_RESULTS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_RESULTS_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_EXAMPLE_RESULTS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_RESULTS_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_EXAMPLE_RESULTS_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_RESULTS_TEXTNODESortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly results: InputMaybe<SortOrderEnum>;
};

type STRAPI_EXAMPLE_SOURCES_TEXTNODE = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sources: Maybe<Scalars['String']>;
};

type STRAPI_EXAMPLE_SOURCES_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_SOURCES_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_SOURCES_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_SOURCES_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_SOURCES_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_SOURCES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_SOURCES_TEXTNODEConnection_groupArgs = {
  field: STRAPI_EXAMPLE_SOURCES_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_SOURCES_TEXTNODEConnection_maxArgs = {
  field: STRAPI_EXAMPLE_SOURCES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_SOURCES_TEXTNODEConnection_minArgs = {
  field: STRAPI_EXAMPLE_SOURCES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_SOURCES_TEXTNODEConnection_sumArgs = {
  field: STRAPI_EXAMPLE_SOURCES_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_SOURCES_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_EXAMPLE_SOURCES_TEXTNODE>;
  readonly node: STRAPI_EXAMPLE_SOURCES_TEXTNODE;
  readonly previous: Maybe<STRAPI_EXAMPLE_SOURCES_TEXTNODE>;
};

type STRAPI_EXAMPLE_SOURCES_TEXTNODEFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sources: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_EXAMPLE_SOURCES_TEXTNODEFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sources: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_EXAMPLE_SOURCES_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_SOURCES_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_SOURCES_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_SOURCES_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_SOURCES_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_SOURCES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_SOURCES_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_EXAMPLE_SOURCES_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_SOURCES_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_EXAMPLE_SOURCES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_SOURCES_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_EXAMPLE_SOURCES_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_SOURCES_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_EXAMPLE_SOURCES_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_SOURCES_TEXTNODESortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sources: InputMaybe<SortOrderEnum>;
};

type STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODE = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly stakeholders: Maybe<Scalars['String']>;
};

type STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEConnection_groupArgs = {
  field: STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEConnection_maxArgs = {
  field: STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEConnection_minArgs = {
  field: STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEConnection_sumArgs = {
  field: STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODE>;
  readonly node: STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODE;
  readonly previous: Maybe<STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODE>;
};

type STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly stakeholders: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly stakeholders: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEFieldSelector;
};


type STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODEFieldSelector;
};

type STRAPI_EXAMPLE_STAKEHOLDERS_TEXTNODESortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly stakeholders: InputMaybe<SortOrderEnum>;
};

type STRAPI_MEASURE = Node & {
  readonly additionalResources: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_LINKS_LINKS>>>;
  readonly children: ReadonlyArray<Node>;
  readonly communityEntries: Maybe<ReadonlyArray<Maybe<STRAPI_COMMUNITY_ENTRY>>>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<STRAPI_MEASUREDescription>;
  readonly examples: Maybe<ReadonlyArray<Maybe<STRAPI_EXAMPLE>>>;
  readonly fundings: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_LINKS_LINKS>>>;
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly guidelines: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_LINKS_LINKS>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly position: Maybe<Scalars['Int']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly shortDescription: Maybe<Scalars['String']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly topic: Maybe<STRAPI_TOPIC>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_MEASURE_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_MEASURE_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};


type STRAPI_MEASURE_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_MEASURE_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_MEASUREConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_MEASUREEdge>;
  readonly group: ReadonlyArray<STRAPI_MEASUREGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_MEASURE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_MEASUREConnection_distinctArgs = {
  field: STRAPI_MEASUREFieldSelector;
};


type STRAPI_MEASUREConnection_groupArgs = {
  field: STRAPI_MEASUREFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_MEASUREConnection_maxArgs = {
  field: STRAPI_MEASUREFieldSelector;
};


type STRAPI_MEASUREConnection_minArgs = {
  field: STRAPI_MEASUREFieldSelector;
};


type STRAPI_MEASUREConnection_sumArgs = {
  field: STRAPI_MEASUREFieldSelector;
};

type STRAPI_MEASUREDescription = {
  readonly data: Maybe<STRAPI_MEASURE_DESCRIPTION_TEXTNODE>;
};

type STRAPI_MEASUREDescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI_MEASURE_DESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI_MEASUREDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_MEASURE_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_MEASUREDescriptionSortInput = {
  readonly data: InputMaybe<STRAPI_MEASURE_DESCRIPTION_TEXTNODESortInput>;
};

type STRAPI_MEASUREEdge = {
  readonly next: Maybe<STRAPI_MEASURE>;
  readonly node: STRAPI_MEASURE;
  readonly previous: Maybe<STRAPI_MEASURE>;
};

type STRAPI_MEASUREFieldSelector = {
  readonly additionalResources: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly communityEntries: InputMaybe<STRAPI_COMMUNITY_ENTRYFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<STRAPI_MEASUREDescriptionFieldSelector>;
  readonly examples: InputMaybe<STRAPI_EXAMPLEFieldSelector>;
  readonly fundings: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFieldSelector>;
  readonly gatsbyPath: InputMaybe<FieldSelectorEnum>;
  readonly guidelines: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly position: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly shortDescription: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly topic: InputMaybe<STRAPI_TOPICFieldSelector>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_MEASUREFilterInput = {
  readonly additionalResources: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly communityEntries: InputMaybe<STRAPI_COMMUNITY_ENTRYFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<STRAPI_MEASUREDescriptionFilterInput>;
  readonly examples: InputMaybe<STRAPI_EXAMPLEFilterListInput>;
  readonly fundings: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFilterListInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly guidelines: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly position: InputMaybe<IntQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly shortDescription: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly topic: InputMaybe<STRAPI_TOPICFilterInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_MEASUREFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_MEASUREFilterInput>;
};

type STRAPI_MEASUREGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_MEASUREEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_MEASUREGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_MEASURE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_MEASUREGroupConnection_distinctArgs = {
  field: STRAPI_MEASUREFieldSelector;
};


type STRAPI_MEASUREGroupConnection_groupArgs = {
  field: STRAPI_MEASUREFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_MEASUREGroupConnection_maxArgs = {
  field: STRAPI_MEASUREFieldSelector;
};


type STRAPI_MEASUREGroupConnection_minArgs = {
  field: STRAPI_MEASUREFieldSelector;
};


type STRAPI_MEASUREGroupConnection_sumArgs = {
  field: STRAPI_MEASUREFieldSelector;
};

type STRAPI_MEASURESortInput = {
  readonly additionalResources: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly communityEntries: InputMaybe<STRAPI_COMMUNITY_ENTRYSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<STRAPI_MEASUREDescriptionSortInput>;
  readonly examples: InputMaybe<STRAPI_EXAMPLESortInput>;
  readonly fundings: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSSortInput>;
  readonly gatsbyPath: InputMaybe<SortOrderEnum>;
  readonly guidelines: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly position: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly shortDescription: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly topic: InputMaybe<STRAPI_TOPICSortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_MEASURE_DESCRIPTION_TEXTNODE = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_MEASURE_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_MEASURE_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_MEASURE_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_MEASURE_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_MEASURE_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_MEASURE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_MEASURE_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_MEASURE_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_MEASURE_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_MEASURE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_MEASURE_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_MEASURE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_MEASURE_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_MEASURE_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_MEASURE_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_MEASURE_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_MEASURE_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_MEASURE_DESCRIPTION_TEXTNODE>;
};

type STRAPI_MEASURE_DESCRIPTION_TEXTNODEFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_MEASURE_DESCRIPTION_TEXTNODEFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_MEASURE_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_MEASURE_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_MEASURE_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_MEASURE_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_MEASURE_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_MEASURE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_MEASURE_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_MEASURE_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_MEASURE_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_MEASURE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_MEASURE_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_MEASURE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_MEASURE_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_MEASURE_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_MEASURE_DESCRIPTION_TEXTNODESortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_TOPIC = Node & {
  readonly additionalResources: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_LINKS_LINKS>>>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<STRAPI_TOPICDescription>;
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly guidelines: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_LINKS_LINKS>>>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<STRAPI__MEDIA>;
  readonly internal: Internal;
  readonly measures: Maybe<ReadonlyArray<Maybe<STRAPI_MEASURE>>>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly position: Maybe<Scalars['Int']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly shortDescription: Maybe<Scalars['String']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_TOPIC_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_TOPIC_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};


type STRAPI_TOPIC_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_TOPIC_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_TOPICConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TOPICEdge>;
  readonly group: ReadonlyArray<STRAPI_TOPICGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TOPIC>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TOPICConnection_distinctArgs = {
  field: STRAPI_TOPICFieldSelector;
};


type STRAPI_TOPICConnection_groupArgs = {
  field: STRAPI_TOPICFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TOPICConnection_maxArgs = {
  field: STRAPI_TOPICFieldSelector;
};


type STRAPI_TOPICConnection_minArgs = {
  field: STRAPI_TOPICFieldSelector;
};


type STRAPI_TOPICConnection_sumArgs = {
  field: STRAPI_TOPICFieldSelector;
};

type STRAPI_TOPICDescription = {
  readonly data: Maybe<STRAPI_TOPIC_DESCRIPTION_TEXTNODE>;
};

type STRAPI_TOPICDescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI_TOPIC_DESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI_TOPICDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_TOPIC_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_TOPICDescriptionSortInput = {
  readonly data: InputMaybe<STRAPI_TOPIC_DESCRIPTION_TEXTNODESortInput>;
};

type STRAPI_TOPICEdge = {
  readonly next: Maybe<STRAPI_TOPIC>;
  readonly node: STRAPI_TOPIC;
  readonly previous: Maybe<STRAPI_TOPIC>;
};

type STRAPI_TOPICFieldSelector = {
  readonly additionalResources: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<STRAPI_TOPICDescriptionFieldSelector>;
  readonly gatsbyPath: InputMaybe<FieldSelectorEnum>;
  readonly guidelines: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly measures: InputMaybe<STRAPI_MEASUREFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly position: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly shortDescription: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_TOPICFilterInput = {
  readonly additionalResources: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<STRAPI_TOPICDescriptionFilterInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly guidelines: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly measures: InputMaybe<STRAPI_MEASUREFilterListInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly position: InputMaybe<IntQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly shortDescription: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_TOPICGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TOPICEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_TOPICGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TOPIC>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TOPICGroupConnection_distinctArgs = {
  field: STRAPI_TOPICFieldSelector;
};


type STRAPI_TOPICGroupConnection_groupArgs = {
  field: STRAPI_TOPICFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TOPICGroupConnection_maxArgs = {
  field: STRAPI_TOPICFieldSelector;
};


type STRAPI_TOPICGroupConnection_minArgs = {
  field: STRAPI_TOPICFieldSelector;
};


type STRAPI_TOPICGroupConnection_sumArgs = {
  field: STRAPI_TOPICFieldSelector;
};

type STRAPI_TOPICSortInput = {
  readonly additionalResources: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<STRAPI_TOPICDescriptionSortInput>;
  readonly gatsbyPath: InputMaybe<SortOrderEnum>;
  readonly guidelines: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<STRAPI__MEDIASortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly measures: InputMaybe<STRAPI_MEASURESortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly position: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly shortDescription: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_TOPIC_DESCRIPTION_TEXTNODE = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_TOPIC_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TOPIC_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_TOPIC_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TOPIC_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TOPIC_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_TOPIC_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_TOPIC_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_TOPIC_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TOPIC_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_TOPIC_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_TOPIC_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_TOPIC_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_TOPIC_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_TOPIC_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_TOPIC_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_TOPIC_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_TOPIC_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_TOPIC_DESCRIPTION_TEXTNODE>;
};

type STRAPI_TOPIC_DESCRIPTION_TEXTNODEFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_TOPIC_DESCRIPTION_TEXTNODEFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_TOPIC_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TOPIC_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_TOPIC_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TOPIC_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TOPIC_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_TOPIC_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_TOPIC_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_TOPIC_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TOPIC_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_TOPIC_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_TOPIC_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_TOPIC_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_TOPIC_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_TOPIC_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_TOPIC_DESCRIPTION_TEXTNODESortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI__COMPONENT_AWARD_AWARD = Node & {
  readonly award: Maybe<STRAPI_AWARD>;
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<STRAPI__COMPONENT_AWARD_AWARDDescription>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
};

type STRAPI__COMPONENT_AWARD_AWARDConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_AWARD_AWARDEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_AWARD_AWARDGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_AWARD_AWARD>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_AWARD_AWARDConnection_distinctArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARDFieldSelector;
};


type STRAPI__COMPONENT_AWARD_AWARDConnection_groupArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARDFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_AWARD_AWARDConnection_maxArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARDFieldSelector;
};


type STRAPI__COMPONENT_AWARD_AWARDConnection_minArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARDFieldSelector;
};


type STRAPI__COMPONENT_AWARD_AWARDConnection_sumArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARDFieldSelector;
};

type STRAPI__COMPONENT_AWARD_AWARDDescription = {
  readonly data: Maybe<STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODE>;
};

type STRAPI__COMPONENT_AWARD_AWARDDescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI__COMPONENT_AWARD_AWARDDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI__COMPONENT_AWARD_AWARDDescriptionSortInput = {
  readonly data: InputMaybe<STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODESortInput>;
};

type STRAPI__COMPONENT_AWARD_AWARDEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_AWARD_AWARD>;
  readonly node: STRAPI__COMPONENT_AWARD_AWARD;
  readonly previous: Maybe<STRAPI__COMPONENT_AWARD_AWARD>;
};

type STRAPI__COMPONENT_AWARD_AWARDFieldSelector = {
  readonly award: InputMaybe<STRAPI_AWARDFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<STRAPI__COMPONENT_AWARD_AWARDDescriptionFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_AWARD_AWARDFilterInput = {
  readonly award: InputMaybe<STRAPI_AWARDFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<STRAPI__COMPONENT_AWARD_AWARDDescriptionFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__COMPONENT_AWARD_AWARDFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__COMPONENT_AWARD_AWARDFilterInput>;
};

type STRAPI__COMPONENT_AWARD_AWARDGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_AWARD_AWARDEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_AWARD_AWARDGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_AWARD_AWARD>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_AWARD_AWARDGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARDFieldSelector;
};


type STRAPI__COMPONENT_AWARD_AWARDGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARDFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_AWARD_AWARDGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARDFieldSelector;
};


type STRAPI__COMPONENT_AWARD_AWARDGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARDFieldSelector;
};


type STRAPI__COMPONENT_AWARD_AWARDGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARDFieldSelector;
};

type STRAPI__COMPONENT_AWARD_AWARDSortInput = {
  readonly award: InputMaybe<STRAPI_AWARDSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<STRAPI__COMPONENT_AWARD_AWARDDescriptionSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODE = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODE>;
};

type STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI__COMPONENT_AWARD_AWARD_DESCRIPTION_TEXTNODESortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly copyright: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<STRAPI__MEDIA>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
};

type STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEConnection_distinctArgs = {
  field: STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFieldSelector;
};


type STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEConnection_groupArgs = {
  field: STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEConnection_maxArgs = {
  field: STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFieldSelector;
};


type STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEConnection_minArgs = {
  field: STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFieldSelector;
};


type STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEConnection_sumArgs = {
  field: STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFieldSelector;
};

type STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGE>;
  readonly node: STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGE;
  readonly previous: Maybe<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGE>;
};

type STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly copyright: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly copyright: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFieldSelector;
};


type STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFieldSelector;
};


type STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFieldSelector;
};


type STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGEFieldSelector;
};

type STRAPI__COMPONENT_IMAGE_COPYRIGHT_IMAGESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly copyright: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<STRAPI__MEDIASortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_LINKS_LINKS = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly display: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly url: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_LINKS_LINKSConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_LINKS_LINKSEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_LINKS_LINKSGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_LINKS_LINKS>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_LINKS_LINKSConnection_distinctArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKSFieldSelector;
};


type STRAPI__COMPONENT_LINKS_LINKSConnection_groupArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKSFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_LINKS_LINKSConnection_maxArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKSFieldSelector;
};


type STRAPI__COMPONENT_LINKS_LINKSConnection_minArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKSFieldSelector;
};


type STRAPI__COMPONENT_LINKS_LINKSConnection_sumArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKSFieldSelector;
};

type STRAPI__COMPONENT_LINKS_LINKSEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_LINKS_LINKS>;
  readonly node: STRAPI__COMPONENT_LINKS_LINKS;
  readonly previous: Maybe<STRAPI__COMPONENT_LINKS_LINKS>;
};

type STRAPI__COMPONENT_LINKS_LINKSFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly display: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_LINKS_LINKSFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly display: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_LINKS_LINKSFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__COMPONENT_LINKS_LINKSFilterInput>;
};

type STRAPI__COMPONENT_LINKS_LINKSGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_LINKS_LINKSEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_LINKS_LINKSGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_LINKS_LINKS>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_LINKS_LINKSGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKSFieldSelector;
};


type STRAPI__COMPONENT_LINKS_LINKSGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKSFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_LINKS_LINKSGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKSFieldSelector;
};


type STRAPI__COMPONENT_LINKS_LINKSGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKSFieldSelector;
};


type STRAPI__COMPONENT_LINKS_LINKSGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_LINKS_LINKSFieldSelector;
};

type STRAPI__COMPONENT_LINKS_LINKSSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly display: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIA = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly ext: Maybe<Scalars['String']>;
  readonly formats: Maybe<STRAPI__MEDIAFormats>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly localFile: Maybe<File>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly size: Maybe<Scalars['Float']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};


type STRAPI__MEDIA_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI__MEDIA_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI__MEDIAConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__MEDIAEdge>;
  readonly group: ReadonlyArray<STRAPI__MEDIAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__MEDIA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__MEDIAConnection_distinctArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAConnection_groupArgs = {
  field: STRAPI__MEDIAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__MEDIAConnection_maxArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAConnection_minArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAConnection_sumArgs = {
  field: STRAPI__MEDIAFieldSelector;
};

type STRAPI__MEDIAEdge = {
  readonly next: Maybe<STRAPI__MEDIA>;
  readonly node: STRAPI__MEDIA;
  readonly previous: Maybe<STRAPI__MEDIA>;
};

type STRAPI__MEDIAFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly formats: InputMaybe<STRAPI__MEDIAFormatsFieldSelector>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly localFile: InputMaybe<FileFieldSelector>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly formats: InputMaybe<STRAPI__MEDIAFormatsFilterInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly localFile: InputMaybe<FileFilterInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormats = {
  readonly thumbnail: Maybe<STRAPI__MEDIAFormatsThumbnail>;
};

type STRAPI__MEDIAFormatsFieldSelector = {
  readonly thumbnail: InputMaybe<STRAPI__MEDIAFormatsThumbnailFieldSelector>;
};

type STRAPI__MEDIAFormatsFilterInput = {
  readonly thumbnail: InputMaybe<STRAPI__MEDIAFormatsThumbnailFilterInput>;
};

type STRAPI__MEDIAFormatsSortInput = {
  readonly thumbnail: InputMaybe<STRAPI__MEDIAFormatsThumbnailSortInput>;
};

type STRAPI__MEDIAFormatsThumbnail = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsThumbnailFieldSelector = {
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFormatsThumbnailFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsThumbnailSortInput = {
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIAGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__MEDIAEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__MEDIAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__MEDIA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__MEDIAGroupConnection_distinctArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAGroupConnection_groupArgs = {
  field: STRAPI__MEDIAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__MEDIAGroupConnection_maxArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAGroupConnection_minArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAGroupConnection_sumArgs = {
  field: STRAPI__MEDIAFieldSelector;
};

type STRAPI__MEDIASortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly formats: InputMaybe<STRAPI__MEDIAFormatsSortInput>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly localFile: InputMaybe<FileSortInput>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type ExampleDetailsQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type ExampleDetailsQuery = { readonly example: { readonly title: string | null, readonly subcategory: string | null, readonly shortDescription: string | null, readonly countryState: string | null, readonly commune: string | null, readonly centrality: string | null, readonly population: string | null, readonly spatialStructure: string | null, readonly period: string | null, readonly slug: string | null, readonly localChallenges: { readonly data: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null, readonly communication: { readonly data: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null, readonly funding: { readonly data: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null, readonly goals: { readonly data: { readonly goals: string | null, readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null, readonly results: { readonly data: { readonly results: string | null, readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null, readonly sources: { readonly data: { readonly sources: string | null, readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null, readonly particularities: { readonly data: { readonly particularities: string | null, readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null, readonly notes: { readonly data: { readonly notes: string | null, readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null, readonly image: { readonly copyright: string | null, readonly image: { readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null, readonly description: { readonly data: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null, readonly relatedOffice: { readonly data: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null, readonly stakeholders: { readonly data: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null, readonly awards: ReadonlyArray<{ readonly award: { readonly name: string | null, readonly logo: { readonly copyright: string | null, readonly image: { readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null } | null, readonly description: { readonly data: { readonly id: string, readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null } | null> | null, readonly links: ReadonlyArray<{ readonly url: string | null, readonly display: string | null } | null> | null, readonly measure: { readonly name: string | null, readonly topic: { readonly name: string | null } | null, readonly examples: ReadonlyArray<{ readonly slug: string | null, readonly position: number | null } | null> | null, readonly communityEntries: ReadonlyArray<{ readonly title: string | null, readonly author: string | null, readonly contact: string | null, readonly subcategory: string | null, readonly countryState: string | null, readonly commune: string | null, readonly description: { readonly data: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null, readonly image: { readonly copyright: string | null, readonly image: { readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null, readonly website: { readonly url: string | null, readonly display: string | null } | null } | null> | null } | null, readonly relatedTopic: { readonly name: string | null } | null } | null };

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type MeasureDetailsQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type MeasureDetailsQuery = { readonly measure: { readonly name: string | null, readonly description: { readonly data: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null, readonly additionalResources: ReadonlyArray<{ readonly url: string | null, readonly display: string | null } | null> | null, readonly guidelines: ReadonlyArray<{ readonly display: string | null, readonly url: string | null } | null> | null, readonly fundings: ReadonlyArray<{ readonly display: string | null, readonly url: string | null } | null> | null, readonly topic: { readonly name: string | null } | null, readonly examples: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly shortDescription: string | null, readonly position: number | null, readonly image: { readonly copyright: string | null, readonly image: { readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null } | null> | null, readonly communityEntries: ReadonlyArray<{ readonly title: string | null, readonly author: string | null, readonly contact: string | null, readonly subcategory: string | null, readonly countryState: string | null, readonly commune: string | null, readonly description: { readonly data: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null, readonly image: { readonly copyright: string | null, readonly image: { readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null, readonly website: { readonly url: string | null, readonly display: string | null } | null } | null> | null } | null };

type TopicDetailsQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type TopicDetailsQuery = { readonly topic: { readonly name: string | null, readonly image: { readonly url: string | null } | null, readonly additionalResources: ReadonlyArray<{ readonly display: string | null, readonly url: string | null } | null> | null, readonly description: { readonly data: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null, readonly guidelines: ReadonlyArray<{ readonly display: string | null, readonly url: string | null } | null> | null, readonly measures: ReadonlyArray<{ readonly name: string | null, readonly slug: string | null, readonly position: number | null, readonly description: { readonly data: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null } | null> | null } | null };

type TopicMeasureTreeQueryVariables = Exact<{ [key: string]: never; }>;


type TopicMeasureTreeQuery = { readonly nestedMeasures: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly slug: string | null, readonly measures: ReadonlyArray<{ readonly name: string | null, readonly slug: string | null } | null> | null }> } };

type TopicOverviewQueryVariables = Exact<{ [key: string]: never; }>;


type TopicOverviewQuery = { readonly topics: { readonly nodes: ReadonlyArray<{ readonly slug: string | null, readonly name: string | null, readonly image: { readonly url: string | null } | null }> }, readonly measures: { readonly nodes: ReadonlyArray<{ readonly slug: string | null, readonly topic: { readonly slug: string | null } | null, readonly examples: ReadonlyArray<{ readonly slug: string | null, readonly title: string | null, readonly shortDescription: string | null, readonly image: { readonly image: { readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null } | null> | null }> } };

type TopicTeasersQueryVariables = Exact<{ [key: string]: never; }>;


type TopicTeasersQuery = { readonly topics: { readonly nodes: ReadonlyArray<{ readonly slug: string | null, readonly name: string | null, readonly image: { readonly url: string | null } | null, readonly description: { readonly data: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null }> } };


}
